from __future__ import annotations
import os, asyncio, logging, tempfile, pandas as pd, subprocess
from datetime import datetime
from pathlib import Path

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
)
from dotenv import load_dotenv

from db import get_conn

# –∫–æ–Ω—Ñ–∏–≥
load_dotenv()
BOT_TOKEN = os.getenv("BOT_KEY")
if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (.env)")

BASE_DIR  = Path(__file__).resolve().parent
MAIN_PATH = BASE_DIR / "main.py"


logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN)
dp  = Dispatcher()
rt  = Router()
dp.include_router(rt)


def export_mentions_excel() -> str:
    #—á–∏—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É mentions –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π excel, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å.
    with get_conn() as conn:
        df = pd.read_sql("""
            SELECT date(substr(a.published,1,10)) AS day,
                   a.title,
                   m.subject,
                   m.sentiment,
                   m.context_snippet,
                   a.url
            FROM   mentions m
            JOIN   articles a ON a.id = m.article_id
            ORDER  BY a.published DESC
        """, conn)

    fd, path = tempfile.mkstemp(
        suffix=f"-mentions-{datetime.now():%Y%m%d-%H%M%S}.xlsx"
    )
    os.close(fd)
    df.to_excel(path, index=False)
    return path

# —Ö—ç–Ω–¥–ª–µ—Ä—ã
@rt.message(CommandStart())
async def cmd_start(msg: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üîÑ¬†–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç",
            callback_data="etl_report"
        )
    ]])
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–±–µ—Ä—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –æ–±–Ω–æ–≤–ª—é –±–∞–∑—É –∏ –ø—Ä–∏—à–ª—é Excel‚Äë–æ—Ç—á—ë—Ç.",
        reply_markup=kb
    )

@rt.callback_query(F.data == "etl_report")
async def etl_and_report(cb: CallbackQuery):
    await cb.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
    await cb.message.edit_text("‚è≥ –°–±–æ—Ä —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π‚Ä¶")

    # 1. –∑–∞–ø—É—Å–∫–∞–µ–º ETL (src/main.py) –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    proc = await asyncio.create_subprocess_exec(
        "python", str(MAIN_PATH),
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    stdout, stderr = await proc.communicate()

    if proc.returncode != 0:
        err = stderr.decode()[:4000] or "unknown error"
        await cb.message.answer(f"‚ùå main.py –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:\n{err}")
        return

    # 2. —Ñ–æ—Ä–º–∏—Ä—É–µ–º Excel –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    try:
        path = export_mentions_excel()
        await bot.send_document(
            chat_id=cb.from_user.id,
            document=FSInputFile(path),
            caption="üìä –°–≤–æ–¥–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        )
    except Exception as e:
        await cb.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç: {e}")
    finally:
        if 'path' in locals() and os.path.exists(path):
            os.remove(path)

# main
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
